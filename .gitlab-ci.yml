stages:
  - build
  - test
  - style

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

variables:
  CACHIX_NAME: nixturris

.nix:
  tags:
    - nix
  before_script:
.nix:
  image: nixos/nix
  tags:
    - docker
  cache:
    key: "nix"
    paths:
      - ".nix-cache"
  before_script:
    - echo "experimental-features = nix-command flakes" >>/etc/nix/nix.conf
    - echo "system-features = nixos-test benchmark big-parallel" >>/etc/nix/nix.conf
    - echo "cores = 0" >>/etc/nix/nix.conf
    - echo "max-jobs = 32" >>/etc/nix/nix.conf
    - echo "extra-substituters = file://$PWD/.nix-cache" >>/etc/nix/nix.conf
    - find /nix/store -maxdepth 1 ! -name \*.drv | sort >/nix/.before
    - nix profile install nixpkgs#cachix
    - cachix use "$CACHIX_NAME"
  after_script:
    - find /nix/store -maxdepth 1 ! -name \*.drv | sort >/nix/.after
    - comm -13 /nix/.before /nix/.after | xargs nix copy --to "file://$PWD/.nix-cache"


## Build stage #################################################################

.build:
  stage: build
  extends: .nix
  script:
    - "nix build .#$ARG"
    - "[ -z \"$CACHIX_KEY\" ] || cachix authtoken $CACHIX_KEY"
    - "[ -z \"$CACHIX_KEY\" ] || cachix push $CACHIX_NAME $(readlink -f result)"

build:tarballMox:
  extends: .build
  variables:
    ARG: tarballMox

build:tarballOmnia:
  extends: .build
  variables:
    ARG: tarballOmnia

# TODO build in libvirtd or something to test also native build

## Test stage ##################################################################

nix-check:
  stage: test
  extends: .nix
  script:
    - nix flake check

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

## Style stage #################################################################

nixfmt:
  stage: style
  extends: .nix
  allow_failure: true
  script:
    - "nix fmt"
    - "git diff --exit-code"
