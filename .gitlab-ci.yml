stages:
  - build
  - test
  - style

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

variables:
  GIT_DEPTH: 0
  CACHIX_NAME: nixturris

.nix:
  image: registry.gitlab.com/cynerd/gitlab-ci-nix
  tags:
    - docker
  cache:
    key: "nix"
    paths:
      - ".nix-cache"
  before_script:
    - gitlab-ci-nix-cache-before
  after_script:
    - gitlab-ci-nix-cache-after



## Build stage #################################################################

.build:
  stage: build
  extends: .nix
  script:
    - "echo 'auto-allocate-uids = false' >> /etc/nix/nix.conf"
    - "nix build .#$ARG"
    - "cp result/tarball/* ."
    - "[ -z \"$CACHIX_KEY\" ] || cachix authtoken $CACHIX_KEY"
    - "[ -z \"$CACHIX_KEY\" ] || cachix push $CACHIX_NAME $(readlink -f result)"

build:tarballMox:
  extends: .build
  variables:
    ARG: tarballMox
  artifacts:
    expose_as: 'Installation Tarball Mox'
    paths:
      - nixos-system-aarch64-linux.tar.xz


build:tarballOmnia:
  extends: .build
  variables:
    ARG: tarballOmnia
  artifacts:
    expose_as: 'Installation Tarball Omnia'
    paths:
      - nixos-system-armv7l-linux.tar.xz

# TODO build in libvirtd or something to test also native build

## Test stage ##################################################################

nix-check:
  stage: test
  extends: .nix
  script:
    - nix flake check

statix:
  stage: test
  extends: .nix
  script:
    - nix run .#statix -- check .

deadnix:
  stage: test
  extends: .nix
  allow_failure: true
  script:
    - nix run .#deadnix -- -f .

include:
  - template: Security/Secret-Detection.gitlab-ci.yml

## Style stage #################################################################

nixfmt:
  stage: style
  extends: .nix
  allow_failure: true
  script:
    - "nix fmt"
    - "git diff --exit-code"
